<?php

namespace App;

use Web3\Web3;
use Web3\Contract;
use Web3\Utils;
use App\Exceptions\BlockchainException;
use App\Utils\Logger;

class BlockchainService {
    private Web3 $web3;
    private Contract $contract;
    private static Logger $logger;
    private string $contractAddress;
    private array $contractABI;

    public static function initialize(): void
    {
        self::$logger = Logger::getInstance();
    }

    /**
     * Constructor
     * @param string $nodeUrl Ethereum node URL
     * @param string $contractAddress Smart contract address
     * @param array $contractABI Contract ABI
     * @throws BlockchainException If contract initialization fails
     */
    public function __construct(string $nodeUrl, string $contractAddress, array $contractABI)
    {
        $this->web3 = new Web3($nodeUrl);
        $this->contractAddress = $contractAddress;
        $this->contractABI = $contractABI;
        
        try {
            $this->contract = new Contract($this->web3->provider, $this->contractABI);
        } catch (\Exception $e) {
            throw BlockchainException::contractNotFound($contractAddress);
        }
    }

    /**
     * Deploy a new escrow contract
     * @param string $contractorAddress Contractor's Ethereum address
     * @param float $budget Project budget in ETH
     * @return string Deployed contract address
     * @throws BlockchainException If deployment fails
     */
    public function deployContract(string $contractorAddress, float $budget): string
    {
        try {
            // Validate ethereum address
            if (!Utils::isAddress($contractorAddress)) {
                throw BlockchainException::invalidAddress($contractorAddress);
            }

            // Convert budget to Wei
            $budgetWei = Utils::toWei((string)$budget, 'ether');
            
            $params = [
                'from' => $_ENV['ETHEREUM_ADMIN_ADDRESS'],
                'gas' => '0x200000',
                'value' => Utils::toHex($budgetWei)
            ];

            $receipt = null;
            $this->contract->deploy($params, [$contractorAddress], function($err, $deployedContract) use (&$receipt) {
                if ($err) {
                    throw BlockchainException::contractDeploymentFailed($err->getMessage());
                }
                $receipt = $deployedContract;
            });

            if (!$receipt) {
                throw BlockchainException::contractDeploymentFailed('Contract deployment timed out');
            }

            self::$logger->info('Contract deployed', [
                'address' => $receipt->contractAddress,
                'contractor' => $contractorAddress,
                'budget' => $budget
            ]);

            return $receipt->contractAddress;
        } catch (\Exception $e) {
            if (!$e instanceof BlockchainException) {
                $e = BlockchainException::contractDeploymentFailed($e->getMessage());
            }
            throw $e;
        }
    }

    /**
     * Check transaction status
     * @param string $txHash Transaction hash
     * @return array Transaction receipt
     * @throws BlockchainException If transaction lookup fails
     */
    public function checkTransactionStatus(string $txHash): array
    {
        try {
            $receipt = null;
            $this->web3->eth->getTransactionReceipt($txHash, function($err, $resp) use (&$receipt) {
                if ($err) {
                    throw BlockchainException::transactionFailed($txHash, $err->getMessage());
                }
                $receipt = $resp;
            });

            if (!$receipt) {
                throw BlockchainException::transactionFailed($txHash, 'Transaction not found');
            }

            self::$logger->debug('Transaction status checked', [
                'hash' => $txHash,
                'status' => $receipt->status
            ]);

            return (array)$receipt;
        } catch (\Exception $e) {
            if (!$e instanceof BlockchainException) {
                $e = BlockchainException::transactionFailed($txHash, $e->getMessage());
            }
            throw $e;
        }
    }

    /**
     * Get contract balance
     * @param string $contractAddress Contract address
     * @return float Balance in ETH
     * @throws BlockchainException If balance lookup fails
     */
    public function getContractBalance(string $contractAddress): float
    {
        try {
            if (!Utils::isAddress($contractAddress)) {
                throw BlockchainException::invalidAddress($contractAddress);
            }

            $balance = null;
            $this->web3->eth->getBalance($contractAddress, function($err, $resp) use (&$balance) {
                if ($err) {
                    throw new \Exception($err->getMessage());
                }
                $balance = $resp;
            });

            if ($balance === null) {
                throw new \Exception('Failed to fetch balance');
            }

            // Convert from Wei to ETH
            $balanceEth = floatval(Utils::fromWei($balance, 'ether'));

            self::$logger->debug('Contract balance checked', [
                'address' => $contractAddress,
                'balance' => $balanceEth
            ]);

            return $balanceEth;
        } catch (\Exception $e) {
            if (!$e instanceof BlockchainException) {
                $e = new BlockchainException("Failed to get contract balance: " . $e->getMessage());
            }
            throw $e;
        }
    }

    /**
     * Release funds to contractor
     * @param string $contractAddress Contract address
     * @throws BlockchainException If release fails
     */
    public function releaseFunds(string $contractAddress): void
    {
        try {
            if (!Utils::isAddress($contractAddress)) {
                throw BlockchainException::invalidAddress($contractAddress);
            }

            $contract = new Contract(
                $this->web3->provider,
                $this->contractABI,
                $contractAddress
            );

            $params = [
                'from' => $_ENV['ETHEREUM_ADMIN_ADDRESS'],
                'gas' => '0x200000'
            ];

            $receipt = null;
            $contract->send('releaseFunds', [], $params, function($err, $txHash) use (&$receipt) {
                if ($err) {
                    throw BlockchainException::transactionFailed($txHash ?? 'unknown', $err->getMessage());
                }
                $receipt = $this->checkTransactionStatus($txHash);
            });

            if (!$receipt || !$receipt['status']) {
                throw new BlockchainException('Fund release transaction failed');
            }

            self::$logger->info('Funds released', [
                'contract' => $contractAddress,
                'transaction' => $receipt['transactionHash']
            ]);
        } catch (\Exception $e) {
            if (!$e instanceof BlockchainException) {
                $e = new BlockchainException("Failed to release funds: " . $e->getMessage());
            }
            throw $e;
        }
    }
}